// Generator for the dining cryptographers scenario (epistemic properties).
// This file is distributed as part of the MCMAS model checker.
// This file is licensed as GNU GPL.
//
// A Lomuscio, H Qu, F Raimondi
// http://vas.doc.ic.ac.uk/software/mcmas

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
// Apple: #include <malloc.h>
#include <math.h>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>

using std::string;
using std::vector;
using std::map;
using namespace std;


int main(int argc, char* argv[]) {

  int N;

  if ( argc != 2 ) {
    cout << "Usage: dc-gen <N> " << endl;
    cout << "Where N is the number of cryptographers, > 2" << endl;
    exit(1);
  }
  else {
    N = atoi(argv[1]);
  }

  cout << "-- The protocol for the dining cryptographers (Chaum)" <<
    endl <<
    "-- This file is automatically generated for " << N <<
    " cryptographers" << endl;
  cout << "Semantics=SingleAssignment;" << endl << endl;

  cout << "Agent Environment" << endl <<
    "  Obsvars:" << endl <<
    "    numberofodd : { none, count };" << endl;

  for (int i=0; i<N; i++) {
    cout << "    say" << i+1 << " : 0..1;" << endl;
  }

  cout << "  end Obsvars" << endl << endl;

  cout << "  Actions = { none };" << endl <<
    "  Protocol:" << endl <<
    "    Other : {none};" << endl <<
    "  end Protocol" << endl << endl;


  // Need to compute when odd and when even for environment
  cout << "  Evolution:" << endl;

  for(int i=1; i<=N; i++) {
    cout << "    say" << i << " = 0 if numberofodd=none and DinCrypt" << i << ".Action=sayequal;" << endl;
    cout << "    say" << i << " = 1 if numberofodd=none and DinCrypt" << i << ".Action=saydifferent;" << endl;
  }

  cout << "    numberofodd=count if numberofodd=none;" << endl;

  cout << "  end Evolution" << endl;
  cout << "end Agent" << endl << endl;

  for (int i=0; i < N; i++) {
    int coinright = (i==0)? N : i;
    cout << "Agent DinCrypt" << i+1 << endl;
    cout << "  Vars:" << endl;
    cout << "    payer : {yes,no};" << endl;
    cout << "    coin" << i+1 << ": { head, tail };" << endl;
    cout << "    coin" << coinright << ": { head, tail };" << endl;
    cout << "  end Vars" << endl;

    cout << "  Actions = { sayequal, saydifferent };" << endl;

    cout << "  Protocol:" << endl;
    cout << "    (payer=no and !coin" << i+1 << "=coin" << coinright << "): {saydifferent};" << endl;
    cout << "    (payer=no and coin" << i+1 << "=coin" << coinright << ") : {sayequal};" << endl;
    cout << "    (payer=yes and !coin" << i+1 << "=coin" << coinright << "): {sayequal};" << endl;
    cout << "    (payer=yes and coin" << i+1 << "=coin" << coinright << ") : {saydifferent};" << endl;
    cout << "  end Protocol" << endl;

    cout << "  Evolution:" << endl;
    cout << "    (payer=yes) if ( payer=yes );" << endl;
    cout << "  end Evolution" << endl;

    cout << "end Agent" << endl << endl;
  }


  cout << "Evaluation" << endl;
  for ( int i=0; i < N; i++ ) {
    cout << "  c"<<i+1<<"paid if ( DinCrypt"<<i+1<<".payer=yes );" << endl;
  }
  cout << "  even_or_odd if ( Environment.numberofodd=count);" << endl;
  cout << "end Evaluation" << endl << endl;


  cout << "InitStates" << endl;
  // First who's the payer
  cout << " ( ";
  for (int i=0; i<=N; i++) {
    cout << "(";
    for (int j=0; j<N; j++) {
      cout << "(DinCrypt"<<j+1<<".payer=";
      if ( i==j ) {
	cout << "yes";
      } else {
	cout << "no";
      }
      cout << ")";
      if ( !(j==N-1) ) {
	cout << " and ";
      } else {
	cout << ") " ;
	if ( !(i==N) ) cout << " or " << endl;
      }
    }
  }
  cout << " ) " << endl;


  cout << " and (Environment.numberofodd=none ";
  for ( int k=0; k<N; k++ ) {
    cout << " and Environment.say"<< k+1 << "=0";
  }
  cout << ")" << endl;

	for ( int k=0; k<N; k++ ) {
    cout << " and DinCrypt" << k+1 << ".coin"<< k+1 << "=DinCrypt" <<
			(k<N-1 ? k+2 : 1) << ".coin" << k+1 << endl;
  }

	cout << ";" << endl;

  cout << "end InitStates" << endl;

  cout << "Groups" << endl;
  cout << "  g1={DinCrypt1";
  for (int k=2; k<=N; k++)
    cout << ", DinCrypt" << k;
  cout << "};" << endl;
  cout << "end Groups" << endl;

  cout << "Formulae"<< endl;
  cout << "AG( (even_or_odd and !c1paid) -> (K(DinCrypt1,(!c1paid";
	for (int k=1; k<N; k++) {
    cout << " and !c"<<k+1<<"paid";
  }
	cout << ")) or " << endl;
	cout << "(K(DinCrypt1,(c2paid";
  for (int k=2; k<N; k++) {
    cout << " or c"<<k+1<<"paid";
  }
  cout << ") ) )";
  for (int k=1; k<N; k++) {
    cout << " and !K(DinCrypt1,c"<<k+1<<"paid)";
    }
    cout << " ));" << endl;
  cout << "end Formulae" << endl;

}
