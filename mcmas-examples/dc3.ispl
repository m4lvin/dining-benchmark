-- The protocol for the dining cryptographers (Chaum)
-- This file is automatically generated for 3 cryptographers
Semantics=SingleAssignment;

Agent Environment
  Obsvars:
    numberofodd : { none, count };
    say1 : 0..1;
    say2 : 0..1;
    say3 : 0..1;
  end Obsvars

  Actions = { none };
  Protocol:
    Other : {none};
  end Protocol

  Evolution:
    say1 = 0 if numberofodd=none and DinCrypt1.Action=sayequal;
    say1 = 1 if numberofodd=none and DinCrypt1.Action=saydifferent;
    say2 = 0 if numberofodd=none and DinCrypt2.Action=sayequal;
    say2 = 1 if numberofodd=none and DinCrypt2.Action=saydifferent;
    say3 = 0 if numberofodd=none and DinCrypt3.Action=sayequal;
    say3 = 1 if numberofodd=none and DinCrypt3.Action=saydifferent;
    numberofodd=count if numberofodd=none;
  end Evolution
end Agent

Agent DinCrypt1
  Vars:
    payer : {yes,no};
    coin1: { head, tail };
    coin3: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin1=coin3): {saydifferent};
    (payer=no and coin1=coin3) : {sayequal};
    (payer=yes and !coin1=coin3): {sayequal};
    (payer=yes and coin1=coin3) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt2
  Vars:
    payer : {yes,no};
    coin2: { head, tail };
    coin1: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin2=coin1): {saydifferent};
    (payer=no and coin2=coin1) : {sayequal};
    (payer=yes and !coin2=coin1): {sayequal};
    (payer=yes and coin2=coin1) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt3
  Vars:
    payer : {yes,no};
    coin3: { head, tail };
    coin2: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin3=coin2): {saydifferent};
    (payer=no and coin3=coin2) : {sayequal};
    (payer=yes and !coin3=coin2): {sayequal};
    (payer=yes and coin3=coin2) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Evaluation
  c1paid if ( DinCrypt1.payer=yes );
  c2paid if ( DinCrypt2.payer=yes );
  c3paid if ( DinCrypt3.payer=yes );
  even_or_odd if ( Environment.numberofodd=count);
end Evaluation

InitStates
 ( ((DinCrypt1.payer=yes) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no))  or
((DinCrypt1.payer=no) and (DinCrypt2.payer=yes) and (DinCrypt3.payer=no))  or
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=yes))  or
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no))  )
 and (Environment.numberofodd=none  and Environment.say1=0 and Environment.say2=0 and Environment.say3=0)
 and DinCrypt1.coin1=DinCrypt2.coin1
 and DinCrypt2.coin2=DinCrypt3.coin2
 and DinCrypt3.coin3=DinCrypt1.coin3
;
end InitStates
Groups
  g1={DinCrypt1, DinCrypt2, DinCrypt3};
end Groups
Formulae
AG( (even_or_odd and !c1paid) -> (K(DinCrypt1,(!c1paid and !c2paid and !c3paid)) or
(K(DinCrypt1,(c2paid or c3paid) ) ) and !K(DinCrypt1,c2paid) and !K(DinCrypt1,c3paid) ));
end Formulae
