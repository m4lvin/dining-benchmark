-- The protocol for the dining cryptographers (Chaum)
-- This file is automatically generated for 10 cryptographers
Semantics=SingleAssignment;

Agent Environment
  Obsvars:
    numberofodd : { none, count };
    say1 : 0..1;
    say2 : 0..1;
    say3 : 0..1;
    say4 : 0..1;
    say5 : 0..1;
    say6 : 0..1;
    say7 : 0..1;
    say8 : 0..1;
    say9 : 0..1;
    say10 : 0..1;
  end Obsvars

  Actions = { none };
  Protocol:
    Other : {none};
  end Protocol

  Evolution:
    say1 = 0 if numberofodd=none and DinCrypt1.Action=sayequal;
    say1 = 1 if numberofodd=none and DinCrypt1.Action=saydifferent;
    say2 = 0 if numberofodd=none and DinCrypt2.Action=sayequal;
    say2 = 1 if numberofodd=none and DinCrypt2.Action=saydifferent;
    say3 = 0 if numberofodd=none and DinCrypt3.Action=sayequal;
    say3 = 1 if numberofodd=none and DinCrypt3.Action=saydifferent;
    say4 = 0 if numberofodd=none and DinCrypt4.Action=sayequal;
    say4 = 1 if numberofodd=none and DinCrypt4.Action=saydifferent;
    say5 = 0 if numberofodd=none and DinCrypt5.Action=sayequal;
    say5 = 1 if numberofodd=none and DinCrypt5.Action=saydifferent;
    say6 = 0 if numberofodd=none and DinCrypt6.Action=sayequal;
    say6 = 1 if numberofodd=none and DinCrypt6.Action=saydifferent;
    say7 = 0 if numberofodd=none and DinCrypt7.Action=sayequal;
    say7 = 1 if numberofodd=none and DinCrypt7.Action=saydifferent;
    say8 = 0 if numberofodd=none and DinCrypt8.Action=sayequal;
    say8 = 1 if numberofodd=none and DinCrypt8.Action=saydifferent;
    say9 = 0 if numberofodd=none and DinCrypt9.Action=sayequal;
    say9 = 1 if numberofodd=none and DinCrypt9.Action=saydifferent;
    say10 = 0 if numberofodd=none and DinCrypt10.Action=sayequal;
    say10 = 1 if numberofodd=none and DinCrypt10.Action=saydifferent;
    numberofodd=count if numberofodd=none;
  end Evolution
end Agent

Agent DinCrypt1
  Vars:
    payer : {yes,no};
    coin1: { head, tail };
    coin10: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin1=coin10): {saydifferent};
    (payer=no and coin1=coin10) : {sayequal};
    (payer=yes and !coin1=coin10): {sayequal};
    (payer=yes and coin1=coin10) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt2
  Vars:
    payer : {yes,no};
    coin2: { head, tail };
    coin1: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin2=coin1): {saydifferent};
    (payer=no and coin2=coin1) : {sayequal};
    (payer=yes and !coin2=coin1): {sayequal};
    (payer=yes and coin2=coin1) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt3
  Vars:
    payer : {yes,no};
    coin3: { head, tail };
    coin2: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin3=coin2): {saydifferent};
    (payer=no and coin3=coin2) : {sayequal};
    (payer=yes and !coin3=coin2): {sayequal};
    (payer=yes and coin3=coin2) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt4
  Vars:
    payer : {yes,no};
    coin4: { head, tail };
    coin3: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin4=coin3): {saydifferent};
    (payer=no and coin4=coin3) : {sayequal};
    (payer=yes and !coin4=coin3): {sayequal};
    (payer=yes and coin4=coin3) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt5
  Vars:
    payer : {yes,no};
    coin5: { head, tail };
    coin4: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin5=coin4): {saydifferent};
    (payer=no and coin5=coin4) : {sayequal};
    (payer=yes and !coin5=coin4): {sayequal};
    (payer=yes and coin5=coin4) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt6
  Vars:
    payer : {yes,no};
    coin6: { head, tail };
    coin5: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin6=coin5): {saydifferent};
    (payer=no and coin6=coin5) : {sayequal};
    (payer=yes and !coin6=coin5): {sayequal};
    (payer=yes and coin6=coin5) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt7
  Vars:
    payer : {yes,no};
    coin7: { head, tail };
    coin6: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin7=coin6): {saydifferent};
    (payer=no and coin7=coin6) : {sayequal};
    (payer=yes and !coin7=coin6): {sayequal};
    (payer=yes and coin7=coin6) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt8
  Vars:
    payer : {yes,no};
    coin8: { head, tail };
    coin7: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin8=coin7): {saydifferent};
    (payer=no and coin8=coin7) : {sayequal};
    (payer=yes and !coin8=coin7): {sayequal};
    (payer=yes and coin8=coin7) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt9
  Vars:
    payer : {yes,no};
    coin9: { head, tail };
    coin8: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin9=coin8): {saydifferent};
    (payer=no and coin9=coin8) : {sayequal};
    (payer=yes and !coin9=coin8): {sayequal};
    (payer=yes and coin9=coin8) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Agent DinCrypt10
  Vars:
    payer : {yes,no};
    coin10: { head, tail };
    coin9: { head, tail };
  end Vars
  Actions = { sayequal, saydifferent };
  Protocol:
    (payer=no and !coin10=coin9): {saydifferent};
    (payer=no and coin10=coin9) : {sayequal};
    (payer=yes and !coin10=coin9): {sayequal};
    (payer=yes and coin10=coin9) : {saydifferent};
  end Protocol
  Evolution:
    (payer=yes) if ( payer=yes );
  end Evolution
end Agent

Evaluation
  c1paid if ( DinCrypt1.payer=yes );
  c2paid if ( DinCrypt2.payer=yes );
  c3paid if ( DinCrypt3.payer=yes );
  c4paid if ( DinCrypt4.payer=yes );
  c5paid if ( DinCrypt5.payer=yes );
  c6paid if ( DinCrypt6.payer=yes );
  c7paid if ( DinCrypt7.payer=yes );
  c8paid if ( DinCrypt8.payer=yes );
  c9paid if ( DinCrypt9.payer=yes );
  c10paid if ( DinCrypt10.payer=yes );
  even_or_odd if ( Environment.numberofodd=count);
end Evaluation

InitStates
 ( ((DinCrypt1.payer=yes) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=yes) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=yes) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=yes) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=yes) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=yes) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=yes) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=yes) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=yes) and (DinCrypt10.payer=no))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=yes))  or 
((DinCrypt1.payer=no) and (DinCrypt2.payer=no) and (DinCrypt3.payer=no) and (DinCrypt4.payer=no) and (DinCrypt5.payer=no) and (DinCrypt6.payer=no) and (DinCrypt7.payer=no) and (DinCrypt8.payer=no) and (DinCrypt9.payer=no) and (DinCrypt10.payer=no))  ) 
 and (Environment.numberofodd=none  and Environment.say1=0 and Environment.say2=0 and Environment.say3=0 and Environment.say4=0 and Environment.say5=0 and Environment.say6=0 and Environment.say7=0 and Environment.say8=0 and Environment.say9=0 and Environment.say10=0)
 and DinCrypt1.coin1=DinCrypt2.coin1
 and DinCrypt2.coin2=DinCrypt3.coin2
 and DinCrypt3.coin3=DinCrypt4.coin3
 and DinCrypt4.coin4=DinCrypt5.coin4
 and DinCrypt5.coin5=DinCrypt6.coin5
 and DinCrypt6.coin6=DinCrypt7.coin6
 and DinCrypt7.coin7=DinCrypt8.coin7
 and DinCrypt8.coin8=DinCrypt9.coin8
 and DinCrypt9.coin9=DinCrypt10.coin9
 and DinCrypt10.coin10=DinCrypt1.coin10
;
end InitStates
Groups
  g1={DinCrypt1, DinCrypt2, DinCrypt3, DinCrypt4, DinCrypt5, DinCrypt6, DinCrypt7, DinCrypt8, DinCrypt9, DinCrypt10};
end Groups
Formulae
AG( (even_or_odd and !c1paid) -> (K(DinCrypt1,(!c1paid and !c2paid and !c3paid and !c4paid and !c5paid and !c6paid and !c7paid and !c8paid and !c9paid and !c10paid)) or 
(K(DinCrypt1,(c2paid or c3paid or c4paid or c5paid or c6paid or c7paid or c8paid or c9paid or c10paid) ) ) and !K(DinCrypt1,c2paid) and !K(DinCrypt1,c3paid) and !K(DinCrypt1,c4paid) and !K(DinCrypt1,c5paid) and !K(DinCrypt1,c6paid) and !K(DinCrypt1,c7paid) and !K(DinCrypt1,c8paid) and !K(DinCrypt1,c9paid) and !K(DinCrypt1,c10paid) ));
end Formulae
